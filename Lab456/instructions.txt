// MIPS Single-Cycle Datapath Test Instructions (NOP, add, lw, sw, lw for verify, more tests)
// File: instructions.txt
// Total: 111 test cases (1 NOP + 10 initial add + 10 initial lw + 10 sw + 10 lw for verify + 70 more tests)
// Updated Opcodes: R-TYPE=000001, LW=000100, SW=000010
// Funct for ADD: 100000
// Format: 32-bit hexadecimal machine code, one instruction per line.
// Comments start with //
// Expected results for ADD instructions are commented based on the execution order and register dependencies.

// Initial Register Values in Testbench:
// $t0 (R8) = 0x00000000
// $t1 (R9) = 0x0000000A (10)
// $t2 (R10) = 0x00000014 (20)
// $t3 (R11) = 0x0000001E (30)
// $t4 (R12) = 0x00000028 (40)
// $t5 (R13) = 0x00000032 (50)
// $t6 (R14) = 0x0000003C (60)
// $t7 (R15) = 0x00000046 (70)
// $s0 (R16) = 0x00000050 (80)
// $s1 (R17) = 0x0000005A (90)
// $s2 (R18) = 0x00000064 (100)
// $s3 (R19) = 0x0000006E (110)
// $s4 (R20) = 0x00000078 (120)
// $s5 (R21) = 0x00000082 (130)
// $s6 (R22) = 0x0000008C (140)
// $s7 (R23) = 0x00000096 (150)
// $zero (R0) = 0x00000000

// Initial Data Memory Values in Testbench (for initial LW reads):
// Mem[0x00] = 0x00000100
// Mem[0x04] = 0x00000200
// Mem[0x08] = 0x00000300
// Mem[0x0C] = 0x00000400
// Mem[0x10] = 0x00000500
// Mem[0x14] = 0x00000600
// Mem[0x18] = 0x00000700
// Mem[0x1C] = 0x00000800
// Mem[0x20] = 0x00000900
// Mem[0x24] = 0x00000A00
// Initial Data Memory Values (for SW verify reads - will be overwritten by SWs):
// Mem[0x100] = 0xDEADBEEF (Initial value before SW)
// Mem[0x104] = 0xCAFEF00D
// ...
// Mem[0x124] = 0xF0F0F0F0


// --- NOP Instruction (at address 0x00000000) ---
// sll $zero, $zero, 0 (NOP)
00000000

// --- 10 ADD Instructions (starting at address 0x00000004) ---
// Format: add rd, rs, rt
// Opcode 000001, Funct 100000, shamt 0
// Expected results based on execution order and register dependencies.

// 1. add $t0, $t1, $t2 ($8 = $9 + $10) -> $t0 = 10 + 20 = 30 (0x1E)
052A4020
// 2. add $t3, $t0, $t1 ($11 = $8 + $9) -> $t3 = 30 + 10 = 40 (0x28)
05095820
// 3. add $t4, $t2, $t3 ($12 = $10 + $11) -> $t4 = 20 + 40 = 60 (0x3C)
054B6020
// 4. add $t5, $t3, $t4 ($13 = $11 + $12) -> $t5 = 40 + 60 = 100 (0x64)
056C6820
// 5. add $t6, $t4, $t5 ($14 = $12 + $13) -> $t6 = 60 + 100 = 160 (0xA0)
058D7020
// 6. add $t7, $t5, $t6 ($15 = $13 + $14) -> $t7 = 100 + 160 = 260 (0x104)
05AE7820
// 7. add $s0, $t6, $t7 ($16 = $14 + $15) -> $s0 = 160 + 260 = 420 (0x1A4)
05CF8020
// 8. add $s1, $s0, $zero ($17 = $16 + $0) -> $s1 = 420 + 0 = 420 (0x1A4)
06008820
// 9. add $t0, $s1, $t0 ($8 = $17 + $8) -> $t0 = 420 + 30 = 450 (0x1C2)
06684020
// 10. add $t1, $t0, $t1 ($9 = $8 + $9) -> $t1 = 450 + 10 = 460 (0x1CC)
05094820

// --- 10 Initial LW Instructions (starting at address 0x0000002C) ---
// Format: lw rt, offset(rs)
// Using $zero (R0) as base register, and specified offsets (0x00 to 0x24).
// These load known values from initialized memory locations into registers.
// Opcode 000100, rs=0 (00000)

// lw $t0, 0($zero) ($8 = Mem[0x00])
10080000
// lw $t1, 4($zero) ($9 = Mem[0x04])
10090004
// lw $t2, 8($zero) ($10 = Mem[0x08])
100A0008
// lw $t3, 12($zero) ($11 = Mem[0x0C])
100B000C
// lw $t4, 16($zero) ($12 = Mem[0x10])
100C0010
// lw $t5, 20($zero) ($13 = Mem[0x14])
100D0014
// lw $t6, 24($zero) ($14 = Mem[0x18])
100E0018
// lw $t7, 28($zero) ($15 = Mem[0x1C])
100F001C
// lw $s0, 32($zero) ($16 = Mem[0x20])
10100020
// lw $s1, 36($zero) ($17 = Mem[0x24])
10110024

// --- 10 SW Instructions (starting at address 0x00000054) ---
// Format: sw rt, offset(rs)
// Using $zero (R0) as base register, and specified offsets (0x100 to 0x124).
// These store register values to memory locations.
// Opcode 000010, rs=0 (00000)

// sw $t0, 256($zero) (Mem[0x100] = $8)
08080100
// sw $t1, 260($zero) (Mem[0x104] = $9)
08090104
// sw $t2, 264($zero) (Mem[0x108] = $10)
080A0108
// sw $t3, 268($zero) (Mem[0x10C] = $11)
080B010C
// sw $t4, 272($zero) (Mem[0x110] = $12)
080C0110
// sw $t5, 276($zero) (Mem[0x114] = $13)
080D0114
// sw $t6, 280($zero) (Mem[0x118] = $14)
080E0118
// sw $t7, 284($zero) (Mem[0x11C] = $15)
080F011C
// sw $s0, 288($zero) (Mem[0x120] = $16)
08100120
// sw $s1, 292($zero) (Mem[0x124] = $17)
08110124

// --- 10 LW Instructions (for SW Verification - starting at address 0x0000007C) ---
// Format: lw rt, offset(rs)
// Using $zero (R0) as base register, and specified offsets (0x100 to 0x124).
// These load data from the locations where the previous SW instructions wrote.
// Opcode 000100, rs=0 (00000)

// lw $t0, 256($zero) ($8 = Mem[0x100]) - Should load the value that was in $t0 when the SW executed
10080100
// lw $t1, 260($zero) ($9 = Mem[0x104]) - Should load the value that was in $t1 when the SW executed
10090104
// lw $t2, 264($zero) ($10 = Mem[0x108]) - Should load the value that was in $t2 when the SW executed
100A0108
// lw $t3, 268($zero) ($11 = Mem[0x10C]) - Should load the value that was in $t3 when the SW executed
100B010C
// lw $t4, 272($zero) ($12 = Mem[0x110]) - Should load the value that was in $t4 when the SW executed
100C0110
// lw $t5, 276($zero) ($13 = Mem[0x114]) - Should load the value that was in $t5 when the SW executed
100D0114
// lw $t6, 280($zero) ($14 = Mem[0x118]) - Should load the value that was in $t6 when the SW executed
100E0118
// lw $t7, 284($zero) ($15 = Mem[0x11C]) - Should load the value that was in $t7 when the SW executed
100F011C
// lw $s0, 288($zero) ($16 = Mem[0x120]) - Should load the value that was in $s0 when the SW executed
10100120
// lw $s1, 292($zero) ($17 = Mem[0x124]) - Should load the value that was in $s1 when the SW executed
10110124

// --- 70 More Test Cases (starting at address 0x000000A4) ---
// Mix of add, lw, sw

// Additions using various registers
// add $s2, $t0, $t1 ($18 = $8 + $9)
05099020
// add $s3, $s2, $t2 ($19 = $18 + $10)
064A9820
// add $t0, $s3, $s0 ($8 = $19 + $16)
06604020
// add $t1, $zero, $s1 ($9 = $0 + $17)
04014820
// add $t2, $t1, $t1 ($10 = $9 + $9)
05295020
// add $s4, $t3, $t4 ($20 = $11 + $12)
056CA020
// add $s5, $s4, $t5 ($21 = $20 + $13)
068DA820
// add $t3, $s5, $s2 ($11 = $21 + $18)
06AA5820
// add $t4, $zero, $t6 ($12 = $0 + $14)
040E6020
// add $t5, $t4, $t4 ($13 = $12 + $12)
058C6820

// LW instructions with various offsets and base registers
// lw $t0, 40($zero) ($8 = Mem[0x28])
10080028
// lw $t1, 8($t0) ($9 = Mem[$8 + 8])
10290008
// lw $t2, 100($s0) ($10 = Mem[$16 + 100])
110A0064
// lw $t3, 0($s1) ($11 = Mem[$17 + 0])
112B0000
// lw $t4, 16($t2) ($12 = Mem[$10 + 16])
104C0010
// lw $t5, 256($t3) ($13 = Mem[$11 + 256])
106D0100
// lw $t6, 4($s2) ($14 = Mem[$18 + 4])
114E0004
// lw $t7, 512($s3) ($15 = Mem[$19 + 512])
116F0200
// lw $s0, 0($t4) ($16 = Mem[$12 + 0])
10808000
// lw $s1, 32($t5) ($17 = Mem[$13 + 32])
10A18820

// SW instructions with various offsets and base registers
// sw $t0, 40($zero) (Mem[0x28] = $8)
08080028
// sw $t1, 8($t0) (Mem[$8 + 8] = $9)
08290008
// sw $t2, 100($s0) (Mem[$16 + 100] = $10)
090A0064
// sw $t3, 0($s1) (Mem[$17 + 0] = $11)
092B0000
// sw $t4, 16($t2) (Mem[$10 + 16] = $12)
084C0010
// sw $t5, 256($t3) (Mem[$11 + 256] = $13)
086D0100
// sw $t6, 4($s2) (Mem[$18 + 4] = $14)
094E0004
// sw $t7, 512($s3) (Mem[$19 + 512] = $15)
096F0200
// sw $s0, 0($t4) (Mem[$12 + 0] = $16)
08808000
// sw $s1, 32($t5) (Mem[$13 + 32] = $17)
08A18820

// More Additions
// add $s2, $s4, $s5 ($18 = $20 + $21)
06AA9020
// add $s3, $s6, $s7 ($19 = $22 + $23)
06EE9820
// add $t0, $s2, $s3 ($8 = $18 + $19)
064B4020
// add $t1, $t0, $t0 ($9 = $8 + $8)
05084820
// add $s4, $t1, $t2 ($20 = $9 + $10)
052AA020
// add $s5, $t3, $t4 ($21 = $11 + $12)
056CA820
// add $s6, $t5, $t6 ($22 = $13 + $14)
058DB020
// add $s7, $t7, $s0 ($23 = $15 + $16)
05FEB820
// add $t2, $s1, $s2 ($10 = $17 + $18)
066A5020
// add $t3, $s3, $s4 ($11 = $19 + $20)
068C5820

// More LW instructions
// lw $t4, 0($s5) ($12 = Mem[$21 + 0])
10A46000
// lw $t5, 4($s6) ($13 = Mem[$22 + 4])
10CC6804
// lw $t6, 8($s7) ($14 = Mem[$23 + 8])
10EE7008
// lw $t7, 12($t0) ($15 = Mem[$8 + 12])
100F000C
// lw $s0, 16($t1) ($16 = Mem[$9 + 16])
10208010
// lw $s1, 20($t2) ($17 = Mem[$10 + 20])
10418814
// lw $s2, 24($t3) ($18 = Mem[$11 + 24])
10629018
// lw $s3, 28($t4) ($19 = Mem[$12 + 28])
1083981C
// lw $s4, 32($t5) ($20 = Mem[$13 + 32])
10A4A020
// lw $s5, 36($t6) ($21 = Mem[$14 + 36])
10C5A824

// More SW instructions
// sw $t4, 0($s5) (Mem[$21 + 0] = $12)
08A46000
// sw $t5, 4($s6) (Mem[$22 + 4] = $13)
08CC6804
// sw $t6, 8($s7) (Mem[$23 + 8] = $14)
08EE7008
// sw $t7, 12($t0) (Mem[$8 + 12] = $15)
080F000C
// sw $s0, 16($t1) (Mem[$9 + 16] = $16)
08208010
// sw $s1, 20($t2) (Mem[$10 + 20] = $17)
08418814
// sw $s2, 24($t3) (Mem[$11 + 24] = $18)
08629018
// sw $s3, 28($t4) (Mem[$12 + 28] = $19)
0883981C
// sw $s4, 32($t5) (Mem[$13 + 32] = $20)
08A4A020
// sw $s5, 36($t6) (Mem[$14 + 36] = $21)
08C5A824

